<!DOCTYPE html>
<html lang="en">
  <head>
    <title><%=typeof title == 'undefined' ? 'Industrial Training Portal - University of Peradeniya, Sri Lanka' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <title><%=title%></title>

    <% if (description) { %>
      <meta name="description" content="<%=description%>">
    <% } else { %>
      <meta name="description" content="Industrial Training Portal is an initiative of Department of Computer Engineering, University of Peradeniya, Sri Lanka, to breath life into web applications using Machine Learning and Artificial Intelligence.">
    <% } %>
      <meta name="keywords" content="Industrial, Portal, Training, Technology, Computer Engineering, Interns, Partners, Organizations, Human Resources, New Learners, Tech savvy, Hardware, Software, Embedded Systems, Networking, Engineers">
      <meta name="author" content="Department of Computer Engineering">

      <link rel="apple-touch-icon" sizes="57x57" href="/icons/apple-icon-57x57.png">
      <link rel="apple-touch-icon" sizes="60x60" href="/icons/apple-icon-60x60.png">
      <link rel="apple-touch-icon" sizes="72x72" href="/icons/apple-icon-72x72.png">
      <link rel="apple-touch-icon" sizes="76x76" href="/icons/apple-icon-76x76.png">
      <link rel="apple-touch-icon" sizes="114x114" href="/icons/apple-icon-114x114.png">
      <link rel="apple-touch-icon" sizes="120x120" href="/icons/apple-icon-120x120.png">
      <link rel="apple-touch-icon" sizes="144x144" href="/icons/apple-icon-144x144.png">
      <link rel="apple-touch-icon" sizes="152x152" href="/icons/apple-icon-152x152.png">
      <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-icon-180x180.png">
      <link rel="icon" type="image/png" sizes="192x192"  href="/icons/android-icon-192x192.png">
      <link rel="icon" type="image/png" sizes="32x32" href="/icons/favicon-32x32.png">
      <link rel="icon" type="image/png" sizes="96x96" href="/icons/favicon-96x96.png">
      <link rel="icon" type="image/png" sizes="16x16" href="/icons/favicon-16x16.png">
      <link rel="manifest" href="/icons/manifest.json">
      <meta property="fb:app_id"             content="219597328470660" />
      <meta property="og:url"                content="http://mystay.lk/listing" />
      <meta property="og:type"               content="website" />
      <meta property="og:title"              content="Industrial Training Portal | University of Peradeniya" />
      <meta property="og:description"        content="Industrial Training Portal is an initiative of Department of Computer Engineering, University of Peradeniya, Sri Lanka, to breath life into web applications using Machine Learning and Artificial Intelligence." />
      <meta property="og:image"              content="http://itportal.ce.pdn.ac.lk/icons/promo.png" />
      <meta property="og:image"              content="http://itportal.ce.pdn.ac.lk/icons/mystay-logo.png" />
      <meta name="msapplication-TileColor" content="#ffffff">
      <meta name="msapplication-TileImage" content="/icons/ms-icon-144x144.png">
      <meta name="theme-color" content="#ffffff">
      
      <link rel="icon" type="image/png" href="/icons/favicon.png">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bulma.css">
    <link rel="stylesheet" href="/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/helpers.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/axios.min.js"></script>
    <script src="/js/dependencies/bulma.js"></script>
    <script src="/js/dependencies/lodash.min.js"></script>
    <script src="/js/dependencies/vue.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
